name: "Terraform"
 
on:
 push:
   branches:
   - master
 pull_request:
   branches:
   - master
   paths:
   - services/**
 
 
jobs:
 changes:
    name: Detect Changes in folder
    runs-on: ubuntu-latest
    outputs:
      names: ${{ steps.filter.outputs.changes }}
    steps:
    - uses: actions/checkout@v2
    - name: Detect Changes
      uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          folder-1:
            - s3/**
            - ec2/**
         
 terraform:
   needs: changes
   if: ${{ needs.changes.outputs.names != '[]' }}
   name: "Terraform Infrastructure Management"
   runs-on: ubuntu-latest
   strategy:
      matrix:
         name: ${{ fromJSON(needs.changes.outputs.names) }}
   permissions:
     id-token: write
     contents: write
   defaults:
     run:
       working-directory: ${{ matrix.name }}
   steps:
     - name: Checkout the repository to the runner
       uses: actions/checkout@v2
     
     - name: Configure AWS Credentails
       uses: aws-actions/configure-aws-credentials@v1
       with:
        role-to-assume: << add arn of IAM Role >>
        aws-region: ap-south-1a   
 
     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v2
       with:
         terraform_version: 1.3.0
    
     - name: Terraform init
       id: init
       run: terraform init 
 
     - name: Terraform format
       id: fmt
       run: terraform fmt
    
     - name: Terraform validate
       id: validate
       run: terraform validate
 
     - name: Terraform plan
       id: plan
       if: github.event_name == 'pull_request'
       run: terraform plan -lock=false -input=false -no-color -out=tfplan --parallelism=200 && terraform show -no-color tfplan
       continue-on-error: true

     - name: Reformat Plan
       run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | grep -v "Refreshing state...\|Reading...\|Read complete after" > plan.txt

     - name: Put Plan in Env Var
       run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV  

     - uses: actions/github-script@v6
       if: github.event_name == 'pull_request'
       env:
         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
       with:
         github-token: ${{ secrets.GIT_TOKEN }}
         script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN} 
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })     
 
     - name: Terraform Plan Status
       if: steps.plan.outcome == 'failure'
       run: exit 1
 
     - name: Terraform Apply
       if: github.ref == 'refs/heads/master' && github.event_name == 'push'
       run: terraform apply -auto-approve -input=false --parallelism=200
